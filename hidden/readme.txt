
 ◆
 ◇ hidden フォルダ（｀ー´）

 このフォルダは arxlc.exe のランチャー項目には表示されません。
 各プラグインの説明は“readme ... (プラグイン名).txt”をご覧下さい。

 □ フォルダ内の各ファイルの概要

 *.ax	ランチャーの機能に関わる大切なファイルです。
	具体的には、
		・arxlc.ax : ランチャーを起動するのに必要
		・plus.ax  : メインメニューの [機能拡張] を利用するのに必要
		・mklnk.ax : 一部のプラグインを利用するのに必要
	です。
	なお、plus.ax と mklnk.ax は [機能拡張] 、つまりプラグインの機能を
	必要としない方なら削除してしまっても問題ありません。
	間違って削除してしまった場合や、
	初回起動時に使用しない設定にしたもののやはり使用してみたい場合は、
	ランチャー特設サイトからプラグインパックを再ダウンロードして下さい。

 *.xpi	ランチャーのプラグインです。
	ランチャーのメインメニュー - [機能拡張] をクリックすると一覧表示され、
	選択された項目に対応する xpi ファイルがプラグインとして起動します。

	※プラグインは Windows 用プログラミング言語 HSP を使って作成されています。
	　作り方の説明はこのファイルの下のほうに書いてあります。

 *.lzh	arxlc のソースや、プラグイン作成用モジュールが圧縮されています。
	全て Hot Soup Processor (ver.2.61) 用です。
 *.dat	ランチャーの設定情報などが記されたファイルです。
 *.png	readme.html で利用される画像ファイルです。

 □ おまけ(arxlc 最小構成)

 arxlc.exe と hidden フォルダ、その中に arxlc.ax があれば、
 arxlc はちゃんと動きます。
 プラグインとかその他色んなものがうざったい人は上記二つのファイル以外
 全部を削除しちゃっても何とかなります。

 readme.html なんかは捨てずに取っておいて欲しいですけど(=＿=)


 ◆
 ◇ HSPユーザー向けの説明

 以降はWindows用プログラミング言語 Hot Soup Processor (HSP, ver.2.61)
 ユーザー向けの解説ですので、HSP を知らない方は、

	HSP 公式サイト;
	http://www.onionsoft.net/hsp/

 などに行って知識を蓄えてから読むか、理解を諦めて下さい(^^;

 □ ax ファイル

 ランチャーの機能を決定するファイルです。
 それぞれ、

	arxlc.ax ← arxlc+.as
	plus.ax ← plus.as
	mklnk.ax ← mklnk.as

 の矢印の元の as ファイルをコンパイルして作成されたオブジェクトファイルです。
 as ファイルは source.lzh に格納されています。
 オブジェクトファイルについては次項で説明してあります。

 □ xpi ファイル

 全ての xpi ファイルは HSP のオブジェクトファイルです。

 オブジェクトファイルはスクリプトエディタのメニュー

	[HSP(P)] - [オブジェクトファイル作成(B) F9]

 で作成できます。
 HSP言語で書かれたソースをコンピュータにとって読みやすい形に
 (速く処理できる形に) 整形したものと考えれば良いです。

 通常は拡張子 ax ですが、arxlc 専用のため xpi として差別化しています。

 xpi ファイルがプラグインとして起動される際、
 メインウィンドウ(ID=0)が非表示の状態でプログラムが開始される点に注意して下さい。
 画面を表示するには

	gsel 0,1

 をスクリプトの適当な位置に挟む必要があります。

 □ as ファイル

 source.lzh を解凍すると、中にはいくつかの as ファイルが入っています。

 arxlc.as はショート部門に応募した元祖 arxlc (ver.1.0x) の、
 arxlc+.as は一般部門に応募した arxlc (ver.10.0x) 本体のソースです。

 plus.as, mklnk.as, start.as は arxlc (ver.10.0x) 作成時に使用します。

 hdtp.as は arxlc (ver.10.0x) とデータのやり取りをするのに使用するモジュールです。
 これを利用するには hsgetmsg.dll (ver.1.4β以降) が必要です。

	ちょくとのページ
	http://yokohama.cool.ne.jp/chokuto/

 からダウンロードして下さい。

 hdtp.as を #include すると以下の命令が拡張されます。

	hdtp_init
	hdtp_req
	hdtp_func
	hdtp_menu

 各命令の使用法は hdtp.as をご覧下さい。
 sample_**.as は、その具体的な利用例です。

 連携と言ってもそんなに大した情報のやり取りは出来ませんが、
 とりあえず "繋がっている!!" という実感が持てて楽しくプログラムを作れると思います。


 ◆
 ◇ arxlc の仕様説明

 arc＠arcis のメモ程度の説明です。

 □ arxlc 初期状態

 hidden フォルダ内に startup.dat があり、

	hidden\\arxlc インストーラ.xpi,initialize

 と書かれています。

 初回起動ではこの記述に従いインストーラが起動します。
 startup.dat はインストーラの設定終了後に削除されます。

 ちなみに、初回起動時以外では、arxlc インストーラは

	|ルートフォルダパス|R|データファイルパス|S

 という特殊コマンドライン指定付きの arxlc.exe へのショートカットを
 任意のフォルダに作成する機能を持ちます。
 このようにして arxlc インストーラに作成されたショートカットが開かれると、
 指定されたフォルダパスをルートとしてランチャー項目が作成されるようになっています。

 □ arxlc のコアとなるオブジェクトファイル

 arxlc.ax はランチャー本体の挙動を決定します。

 plus.ax は hidden フォルダ内の xpi ファイルを列挙してメニュー表示し、
 選択されたプラグインを arxlc.exe から起動します。
 arxlc.exe には
	run:プラグインファイル名
 というコマンドラインが渡されます。

 mklnk.ax は他のプラグインなどから利用されることを前提にして作られています。
 コマンドラインを解析してリンクファイルを作成します。
 プラグインからは
	exec "\""+exedir+"\\arxlc.exe\" run:hidden\\mklnk.ax,(mklnk.ax に渡すコマンドライン)"
 のようにして呼び出します。
 尚、arxlc 本体のフルパス exedir+"\\arxlc.exe" の部分は、
 hdtp.as を利用して取得しておくことを推奨します。

 (mklnk.ax に渡すコマンドライン) には
	"リンク先ファイル名","コマンドライン","リンク名","アイコンファイル名",アイコンインデックス
 を指定します。
 "リンク名" は必須です。
 ドライブレターが含まれていない場合は、
 arxlc のルートフォルダからの相対パスとして認識されます。

 □ 設定ファイル

 設定ファイルは通常 hidden フォルダ内に arxlc.dat という名前で作成されます。
 特殊コマンドラインが指定されると設定ファイル名が変わる場合もあります。
 プラグインからは hdtp_req 命令で正しい設定ファイル名を取得するようにして下さい。

 この冒頭は数値型の設定情報で、後に 512 byte ずつアプリ登録してあるリンクのフルパスが続いています。
 数値型設定情報の数は設定ファイル冒頭の 4 byte に保存されており、

	dim setting,16
	bload setpath,setting,64,0

 とすると setting.0 に代入されます。(setpath は設定ファイルのフルパス)
 setting.0*4 がアプリ登録してあるリンクのフルパス情報へのオフセットになります。 
 数値型設定情報は arxlc+.as 内では配列数が setting.0 の数値型配列変数として扱われています。
 詳細については arxlc+.as の設定読み込み箇所を直接ご覧下さい。
 設定ファイルをプラグインから書き換えるサンプルとしては arxlc の詳細設定.as があります。

 □ メニュー項目ID

 メインメニューの項目IDは

	192未満がシステム使用(設定の変更、arxlc 終了など)
	192以上がランチャー項目の起動

 に使われています。
 192以上では

	ID/192-1 がランチャー項目を含むフォルダの番号
	ID\192   がそのフォルダ内でのランチャー項目の順番

 となっており、
 arxlc+.as 内では ID からランチャー項目のフルパスを取得する際
 (filemax は 192 と定義されています。)

	i=ID/filemax-1
	notesel filelist.i
	noteget s,ID\filemax

 としています。
 filelist は文字列型の配列変数で、
 arxlc が検索した順にフォルダ内のファイルリストが収められています。

 □ arxlc のプラグインとのデータ通信

 これは hdtp.as を利用する際には気にする必要の無い事項です。
 hdtp.as が水面下でしているコトについての説明です。

 データ通信には WIN32API の SendMessageA 関数を使用しています。

 プラグイン→arxlc への要請の種類は、
 送る wParam の下位 2bit によって

	00 数値情報のプラグインへの送信
	10 文字列情報のプラグインへの送信
	01 メニュークリック時の機能を実行
	11 メニューのポップアップとプラグインへの結果送信

 というように場合分けされています。
 1byte は 8bit で、 wParam には 4bytes までの値を指定できますから、
 上記 2bit を除く残り 3byte + 6bit で各要請の詳細を決定しています。
 尚、「メニュークリック時の機能を実行」については、
 ランチャー項目をクリックした際実行する機能として

	リンク元を開く
	リンク元フォルダを開く
	...(略)

 の 8 種が考えられますので、これを更に下位 3bit で決定しています。
 その場合は残り 3byte + 3bit でメニュー項目IDを指定することになるわけですが、
 1byte で 0〜255 の数を指定できることを考えれば
 3byte では 256 の3乗、1677万通り以上を指定できるので十分です。
